{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "http://example.com/example.json",
    "type": "object",
    "title": "IBM Certified Container Software for Sterling External Authentication Server JSON schema",
    "required": [
        "license",
        "licenseType",
        "image",
        "seasArgs",
        "serviceAccount"
    ],
    "properties": {
        "license": {
            "$id": "#/properties/license",
            "type": "boolean",
            "title": "SEAS license acceptance",
            "description": "Please accept license after reading it at http://www-03.ibm.com/software/sla/sladb.nsf (L/N:  L-KNAN-CHKAUA)",
            "default": false
        },
        "licenseType": {
            "$id": "#/properties/licenseType",
            "type": "string",
            "title": "License edition for IBM Certified Container Software for SEAS",
            "description": "Please provide the license type edition as either prod or non-prod for production or non-production respectively.",
            "default": "prod",
            "examples": [
			    "prod",
                "non-prod"
            ]
        },
		"nameOverride": {
            "$id": "#/properties/nameOverride",
            "type": "string",
            "title": "Name Override",
            "description": "This name will be appended to release name to form the name of the resources created by this chart.",
            "default": ""
        },
        "arch": {
            "$id": "#/properties/arch",
            "type": "string",
            "title": "Worker Node Architecture",
            "description": "Specify the worker node architecture where deployment would be done. The helm chart will try to detect the architecture based on the master node.",
            "default": "amd64",
            "examples": [
                "amd64"
            ]
        },
        "image": {
            "$id": "#/properties/image",
            "type": "object",
            "title": "Container Image Configuration",
            "default": {},            
            "required": [
                "repository",
                "tag",
				"imageSecrets",
                "pullPolicy"
            ],
            "properties": {
                "repository": {
                    "$id": "#/properties/image/properties/repository",
                    "type": "string",
                    "title": "SEAS Image Repository",
                    "description": "Specify the container image registry with image name",
                    "default": "cp.icr.io/cp/ibm-seas/seas-docker-image"
                },
                "tag": {
                    "$id": "#/properties/image/properties/tag",
                    "type": "string",
                    "title": "Image Tag",
                    "description": "Specify a valid image tag present on registry.",
                    "default": "6.1.0.0.02",
                    "examples": [
                        "6.1.0.0.02",
                        "6.1.0.0.01",
                        "6.1.0.0",
                        "6.0.3.0.04",
                        "6.0.3.0.02plus",
                        "6.0.3.0.02"
                    ]
                },
                "imageSecrets": {
                    "$id": "#/properties/image/properties/imageSecrets",
                    "type": "string",
                    "title": "Image Registry Secret",
                    "description": "Specify the secret to use when pulling the image. Please provide this when using an image from a private registry.",
					"default": ""
					
                },
                "pullPolicy": {
                    "$id": "#/properties/image/properties/pullPolicy",
                    "type": "string",
                    "title": "Image Pull Policy",
                    "description": "Specify the image pull policy for containers.",
                    "default": "IfNotPresent",
                    "examples": [
                        "IfNotPresent",
                        "Always",
                        "Never"
                    ]
                },
                "digest": {
                    "$id": "#/properties/image/properties/digest",
                    "type": "object",
                    "title": "Image Digest Details",
                    "default": {},                    
                    "required": [
                        "enabled",
                        "value"
                    ],
                    "properties": {
                        "enabled": {
                            "$id": "#/properties/image/properties/digest/properties/enabled",
                            "type": "boolean",
                            "title": "Digest Enablement",
                            "description": "Enable/disable digest to be used for image pull from registry.",
                            "default": true
                        },
                        "value": {
                            "$id": "#/properties/image/properties/digest/properties/value",
                            "type": "string",
                            "title": "Image Digest Value",
                            "default": "sha256:c79606ed55dcdc0cf200d6dac0175a3cf0feba3276387530bfe697b84d5455cf",
							"examples": [
								"sha256:c79606ed55dcdc0cf200d6dac0175a3cf0feba3276387530bfe697b84d5455cf",
								"sha256:9d2cf7536ef033c19fbfc1bfa77b8da35ec95e26f00b82474cf9ed15346a1689",
								"sha256:a380c33e35b7a63d6731d717301f18d425a413488281791b978f78093c12b324",
								"sha256:66034611b48461fa2ed95253a1b8262977886a5cf01fe771cb0615264e4fe8c6",
								"sha256:d25a49e3fbd552f52f0c3edde934eba3ed195e36392ed0abe1d6453b6d1cf0b4"
							]
                        }
                    }
                }
            }
        },
		"seasArgs": {
            "$id": "#/properties/seasArgs",
            "type": "object",
            "title": "SEAS Configuration Parameters",
			"default": {},
            "required": [
                "maxHeapSize"
            ],
            "properties": {
                "maxHeapSize": {
                    "$id": "#/properties/seasArgs/properties/maxHeapSize",
                    "type": "string",
                    "title": "JVM Heap Size",
                    "description": "JVM heap size, don't set more than container limit resource memory.",
                    "default": "1024m"
                }
            }
        },
		"persistentVolume": {
            "$id": "#/properties/persistentVolume",
            "type": "object",
            "title": "PV and PVC Configuration",
            "default": {},
            "required": [
                "enabled",
                "useDynamicProvisioning",
                "size",
                "accessMode"
            ],
            "properties": {
                "enabled": {
                    "$id": "#/properties/persistentVolume/properties/enabled",
                    "type": "boolean",
                    "title": "Enable/Disable Persistence",
                    "description": "This parameters governs if persistence storage is required or not. Currenty, disabling this parameter is not supported.",
                    "default": true
                },
                "useDynamicProvisioning": {
                    "$id": "#/properties/persistentVolume/properties/useDynamicProvisioning",
                    "type": "boolean",
                    "title": "Enable/Disable Dynamic Provisioning",
                    "description": "This parameter governs the enabling disabling of dynamic provisioning in container using storage class.",
                    "default": false
                },
                "existingClaimName": {
                    "$id": "#/properties/persistentVolume/properties/existingClaimName",
                    "type": "string",
                    "title": "Existing Persistent Volume Claim",
                    "description": "Specify the existing persistent Volume claim name to be used for data persistence.",
                    "default": ""
                },
                "labelName": {
                    "$id": "#/properties/persistentVolume/properties/labelName",
                    "type": "string",
                    "title": "Label Name",
                    "description": "Specify the label name for manually created persistent volume resource to be used for this deployment.",
                    "default": "app.kubernetes.io/name"
                },
                "labelValue": {
                    "$id": "#/properties/persistentVolume/properties/labelValue",
                    "type": "string",
                    "title": "Label Value",
                    "description": "Specify the label value for manually created persistent volume resource to be used for this deployment.",
                    "default": "ibm-seas-pv"
                },
                "storageClassName": {
                    "$id": "#/properties/persistentVolume/properties/storageClassName",
                    "type": "string",
                    "title": "Storage Class Name",
                    "description": "Specify the Storage Class name for dynamic provisioning for data persistence.",
                    "default": "manual"
                },
                "size": {
                    "$id": "#/properties/persistentVolume/properties/size",
                    "type": "string",
                    "title": "Persistent Volume Claim Size",
                    "description": "Specify the claim size to be used for this deployment. Please note that this is minimum requirement for deployment.",
                    "default": "2Gi"
                },
                "accessMode": {
                    "$id": "#/properties/persistentVolume/properties/accessMode",
                    "type": "string",
                    "title": "Access Mode for Persistent Volume Claim",
                    "description": "Specify the access mode for data persistence. Currently, only ReadWriteOnce is supported.",
                    "default": "ReadWriteOnce",
                    "examples": [
                        "ReadWriteOnce"
                    ]
                }
            }
        },
		"storageSecurity": {
            "$id": "#/properties/storageSecurity",
            "type": "object",
            "title": "Storage Security",
            "properties": {
                "fsGroup": {
                    "$id": "#/properties/storageSecurity/properties/fsGroup",
                    "type": "integer",
                    "title": "File System GID",
                    "description": "Specify the file system group ID for persistent volume",
                    "default": 65534
                },
                "supplementalGroups": {
                    "$id": "#/properties/storageSecurity/properties/supplementalGroups",
                    "type": "array",
                    "title": "The supplementalGroups schema",
                    "description": "An explanation about the purpose of this instance.",
                    "items": {
                        "$id": "#/properties/storageSecurity/properties/supplementalGroups/items",
                        "type": "integer",
                        "additionalItems": true
                    }
                }
            }
        },
		"service": {
            "$id": "#/properties/service",
            "type": "object",
            "title": "Service Configuration",
            "default": {},
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "$id": "#/properties/service/properties/type",
                    "type": "string",
                    "title": "Service Type",
                    "description": "Specify the service type to be used to expose the Engine application.",
                    "default": "LoadBalancer",
                    "examples": [
                        "LoadBalancer",
						"NodePort",
                        "ClusterIP"						
                    ]
                },
                "loadBalancerIP": {
                    "$id": "#/properties/service/properties/loadBalancerIP",
                    "type": "string",
                    "title": "Static Load Balancer IP",
                    "description": "Specify a valid static Load Balancer IP, if available to access the Engine application.",
                    "default": ""
                },
                "externalIP": {
                    "$id": "#/properties/service/properties/externalIP",
                    "type": "string",
                    "title": "ExternalIP for Service",
                    "description": "Specify the External IP to access the Engine application.",
                    "default": ""
                },
                "annotations": {
                    "$id": "#/properties/service/properties/annotations",
                    "type": "object",
                    "title": "Service Annotations",
                    "description": "Specify the Service annotations if needed.",
                    "default": {},
                    "additionalProperties": true
                },
                "externalTrafficPolicy": {
                    "$id": "#/properties/service/properties/externalTrafficPolicy",
                    "type": "string",
                    "title": "External Traffic Policy",
                    "description": "Specify the external traffic policy if needed.",
                    "default": ""
                },
                "sessionAffinity": {
                    "$id": "#/properties/service/properties/sessionAffinity",
                    "type": "string",
                    "title": "Session Affinity",
                    "description": "Specify the session affinity.",
                    "default": "ClientIP"
                },
                "nonSecure": {
                    "$id": "#/properties/service/properties/nonSecure",
                    "type": "object",
                    "title": "Non Secure Port",
                    "default": {},
                    "required": [
                        "servicePort",
                        "containerPort"
                    ],
                    "properties": {
                        "servicePort": {
                            "$id": "#/properties/service/properties/nonSecure/properties/servicePort",
                            "type": "integer",
                            "title": "Service Port",
                            "description": "Specify non secure port number.",
                            "default": 61365
                        },
                        "containerPort": {
                            "$id": "#/properties/service/properties/nonSecure/properties/containerPort",
                            "type": "integer",
                            "title": "Container Port",
                            "description": "Specify the non secure container port number and do not change this number if not needed.",
                            "default": 61365
                        }
                    }
                },
				 "secure": {
                    "$id": "#/properties/service/properties/secure",
                    "type": "object",
                    "title": "Secure Port",
                    "default": {},
                    "required": [
                        "servicePort",
                        "containerPort"
                    ],
                    "properties": {
                        "servicePort": {
                            "$id": "#/properties/service/properties/secure/properties/servicePort",
                            "type": "integer",
                            "title": "Service Port",
                            "description": "Specify secure port number.",
                            "default": 61366
                        },
                        "containerPort": {
                            "$id": "#/properties/service/properties/secure/properties/containerPort",
                            "type": "integer",
                            "title": "Container Port",
                            "description": "Specify the secure container port number and do not change this number if not needed.",
                            "default": 61366
                        }
                    }
                },
				 "jetty": {
                    "$id": "#/properties/service/properties/jetty",
                    "type": "object",
                    "title": "Jetty Port",
                    "default": {},
                    "required": [
                        "servicePort",
                        "containerPort"
                    ],
                    "properties": {
                        "servicePort": {
                            "$id": "#/properties/service/properties/jetty/properties/servicePort",
                            "type": "integer",
                            "title": "Service Port",
                            "description": "Specify jetty port number.",
                            "default": 9080
                        },
                        "containerPort": {
                            "$id": "#/properties/service/properties/jetty/properties/containerPort",
                            "type": "integer",
                            "title": "Container Port",
                            "description": "Specify the jetty container port number and do not change this number if not needed.",
                            "default": 9080
                        }
                    }
                }
            }
        },
		"secret": {
            "$id": "#/properties/secret",
            "type": "object",
            "title": "Secret Configuration",
            "default": {},
            "required": [
                "secretName"
            ],
            "properties": {
                "secretName": {
                    "$id": "#/properties/secret/properties/secretName",
                    "type": "string",
                    "title": "SEAS Secret Name",
                    "description": "Specify the secret name which is created as prerequisite for this deployment.",
                    "default": ""
                }
            }
        },
        "serviceAccount": {
            "$id": "#/properties/serviceAccount",
            "type": "object",
            "title": "Service Account Configuration",
            "default": {},
            "required": [
                "create"
            ],
            "properties": {
                "create": {
                    "$id": "#/properties/serviceAccount/properties/create",
                    "type": "boolean",
                    "title": "Service Account Create",
                    "description": "UnCheck if you want to use existing service account.",
                    "default": true
                },
                "name": {
                    "$id": "#/properties/serviceAccount/properties/name",
                    "type": "string",
                    "title": "Service Account Name",
                    "description": "Specify service account name if existing service account is to be use for this deployment.",
                    "default": ""
                }
            }
        },
		"resources": {
            "$id": "#/properties/resources",
            "type": "object",
            "title": "Resource Configuration",
            "default": {},
            "required": [
                "limits",
                "requests"
            ],
            "properties": {
                "limits": {
                    "$id": "#/properties/resources/properties/limits",
                    "type": "object",
                    "title": "Resource Limits",
                    "default": {},
                    "required": [
                        "cpu",
                        "memory"
                    ],
                    "properties": {
                        "cpu": {
                            "$id": "#/properties/resources/properties/limits/properties/cpu",
                            "type": "string",
                            "title": "CPU Limit",
                            "description": "The upper limit of CPU core. Specify integers, fractions (e.g. 0.5), or millicores values(e.g. 1000m, where 1000m is equivalent to 1 core).",
                            "default": "1000m"
                        },
                        "memory": {
                            "$id": "#/properties/resources/properties/limits/properties/memory",
                            "type": "string",
                            "title": "Memory Limit",
                            "description": "The memory upper limit in bytes. Specify integers with suffixes: E, P, T, G, M, K, or power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.",
                            "default": "1Gi"
                        }
                    }
                },
                "requests": {
                    "$id": "#/properties/resources/properties/requests",
                    "type": "object",
                    "title": "Request Limits",
                    "default": {},
                    "required": [
                        "cpu",
                        "memory"
                    ],
                    "properties": {
                        "cpu": {
                            "$id": "#/properties/resources/properties/requests/properties/cpu",
                            "type": "string",
                            "title": "CPU Request",
                            "description": "The upper limit of CPU core. Specify integers, fractions (e.g. 0.5), or millicores values(e.g. 1000m, where 1000m is equivalent to 1 core).",
                            "default": "1000m"
                        },
                        "memory": {
                            "$id": "#/properties/resources/properties/requests/properties/memory",
                            "type": "string",
                            "title": "Memory Request",
                            "description": "The memory upper limit in bytes. Specify integers with suffixes: E, P, T, G, M, K, or power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.",
                            "default": "1Gi"
                        }
                    }
               }
            }
        },
		"affinity": {
            "$id": "#/properties/affinity",
            "type": "object",
            "title": "Affinity Configuration",
            "default": {},
            "required": [
                "nodeAffinity"
            ],
            "properties": {
                "nodeAffinity": {
                    "$id": "#/properties/affinity/properties/nodeAffinity",
                    "type": "object",
                    "title": "Node Affinity",
                    "default": {},
                    "required": [
                        "requiredDuringSchedulingIgnoredDuringExecution",
                        "preferredDuringSchedulingIgnoredDuringExecution"
                    ],
                    "properties": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/nodeAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Node Affinity RequiredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/nodeAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        },
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/nodeAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Node Affinity PreferredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/nodeAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        }
                    }
                },
                "podAffinity": {
                    "$id": "#/properties/affinity/properties/podAffinity",
                    "type": "object",
                    "title": "Pod Affinity",
                    "default": {},
                    "required": [
                        "requiredDuringSchedulingIgnoredDuringExecution",
                        "preferredDuringSchedulingIgnoredDuringExecution"
                    ],
                    "properties": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Affinity RequiredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAffinity.requiredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        },
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Affinity PreferredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAffinity.preferredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        }
                    }
                },
                "podAntiAffinity": {
                    "$id": "#/properties/affinity/properties/podAntiAffinity",
                    "type": "object",
                    "title": "Pod Anti-Affinity",
                    "default": {},
                    "required": [
                        "requiredDuringSchedulingIgnoredDuringExecution",
                        "preferredDuringSchedulingIgnoredDuringExecution"
                    ],
                    "properties": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAntiAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Anti-Affinity RequiredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAntiAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        },
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAntiAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Anti-Affinity PreferredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAntiAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        }
                    }
                }
            }
        },
		"livenessProbe": {
            "$id": "#/properties/livenessProbe",
            "type": "object",
            "title": "Liveness Probe Configuration",
            "required": [
                "initialDelaySeconds",
                "timeoutSeconds",
                "periodSeconds",
				"failureThreshold"
            ],
            "properties": {
                "initialDelaySeconds": {
                    "$id": "#/properties/livenessProbe/properties/initialDelaySeconds",
                    "type": "integer",
                    "title": "Initial Delay",
                    "description": "Specify the initial delay in starting liveness probe in seconds",
                    "default": 175
                },
                "timeoutSeconds": {
                    "$id": "#/properties/livenessProbe/properties/timeoutSeconds",
                    "type": "integer",
                    "title": "Timeout",
                    "description": "Specify the probe timeout in seconds",
                    "default": 30
                },
                "periodSeconds": {
                    "$id": "#/properties/livenessProbe/properties/periodSeconds",
                    "type": "integer",
                    "title": "Period",
                    "description": "Specify the time period between two probes in seconds",
                    "default": 60
                },
				"failureThreshold": {
                    "$id": "#/properties/livenessProbe/properties/failureThreshold",
                    "type": "integer",
                    "title": "Failure Threshold",
                    "description": "Specify the failure threshold count.",
                    "default": 10
                }
            }
        },
        "readinessProbe": {
            "$id": "#/properties/readinessProbe",
            "type": "object",
            "title": "Readiness Probe Configuration",
            "required": [
                "initialDelaySeconds",
                "timeoutSeconds",
                "periodSeconds",
				"failureThreshold"
            ],
            "properties": {
                "initialDelaySeconds": {
                    "$id": "#/properties/readinessProbe/properties/initialDelaySeconds",
                    "type": "integer",
                    "title": "Initial Delay",
                    "description": "Specify the initial delay in starting readiness probe in seconds.",
                    "default": 170
                },
                "timeoutSeconds": {
                    "$id": "#/properties/readinessProbe/properties/timeoutSeconds",
                    "type": "integer",
                    "title": "Timeout",
                    "description": "Specify the probe timeout in seconds.",
                    "default": 5
                },
                "periodSeconds": {
                    "$id": "#/properties/readinessProbe/properties/periodSeconds",
                    "type": "integer",
                    "title": "Time Period",
                    "description": "Specify the time period between two probes in seconds.",
                    "default": 60
                },
				"failureThreshold": {
                    "$id": "#/properties/livenessProbe/properties/failureThreshold",
                    "type": "integer",
                    "title": "Failure Threshold",
                    "description": "Specify the failure threshold count.",
                    "default": 10
                }
            }
        },
        "route": {
            "$id": "#/properties/route",
            "type": "object",
            "title": "OpenShift Route Configuration",
            "required": [
                "enabled"
            ],
            "properties": {
                "enabled": {
                    "$id": "#/properties/route/properties/enabled",
                    "type": "boolean",
                    "title": "Enable/Disable OpenShift Route",
                    "description": "Check if you want to enable OpenShift route creation.",
                    "default": false
                }
            }
        },
        "dashboard": {
            "$id": "#/properties/dashboard",
            "type": "object",
            "title": "Dashboard Monitoring",
            "properties": {
                "enabled": {
                    "$id": "#/properties/dashboard/properties/enabled",
                    "type": "boolean",
                    "title": "Enable/Disable Dashboard",
                    "description": "Enable/Disable dashboard monitoring",
                    "default": false
                }
            }
        },
		"customProperties": {
            "$id": "#/properties/customProperties",
            "type": "array",
            "title": "Properties File Configuration",
            "description": "Specify the custom properties if you want to modify the following properties files: 'bin/log.properties', 'bin/security.properties', 'bin/ldapImportTool.properties' and for this you need to pass property in key and value format: <File Name Without Extension>_<Property Name>=<Property Value>. For Example: log_audit.log.maxfilesize=10MB",
			"items": {
				"$id": "#/properties/customProperties/items",
				"type": "string",
				"additionalItems": true
			}
        },
        "vmArguments": {
            "$id": "#/properties/vmArguments",
            "type": "array",
            "title": "VM Argument Configuration",
            "description": "Specify VM arguments. For Example Djavax.net.debug=ssl,handshake,data,trustmanager",
            "items": {
				"$id": "#/properties/vmArguments/items",
				"type": "string",
				"additionalItems": true
			}
        },
		"customFiles": {
            "$id": "#/properties/customFiles",
            "type": "array",
            "title": "Custom Directory/File Configuration",
            "description": "Specify the custom directories/files if you want map inside container and for this you need to specify full path of the file or directory and First you need to create the directory with 'SEAS_RESOURCES' name in PV if it is not available and place the custom directories/files in 'SEAS_RESOURCES' directory. For example: /conf/log4j2.xml and /customDir etc.",
            "items": {
				"$id": "#/properties/customFiles/items",
				"type": "string",
				"additionalItems": true
			}
        },
		"networkPolicy": {
            "$id": "#/properties/networkPolicy",
            "type": "object",
            "title": "Network Policy Configuration",        
            "default": {},
            "required": [
                "policyTypes"               
            ],
            "properties": {
                "policyTypes": {
                    "$id": "#/properties/networkPolicy/properties/policyTypes",
                    "type": "array",
                    "title": "Policy Type",
                    "description": "Specify the policy type.",
					"additionalItems": false,
					"items": {
                        "$id": "#/properties/networkPolicy/properties/policyTypes/items",
                        "type": "string"
                    }
                },
                "ingress": {
                    "$id": "#/properties/networkPolicy/properties/ingress",
                    "type": "array",
                    "title": "Ingress Configure",
                    "description": "Specify the ingress configuration",
                    "items": {
                        "$id": "#/properties/networkPolicy/properties/ingress/items",
                        "type": "object",
                        "additionalItems": true
                    }
                },
                "egress": {
					"$id": "#/properties/networkPolicy/properties/egress",
					"type": "array",
					"title": "Egress Configure",
					"description": "Specify the egress configuration",
					"items": {
						"$id": "#/properties/networkPolicy/properties/egress/items",
						"type": "object",
						"additionalItems": true
					}
				}
			}
		}
     },
	 "additionalProperties": true
 }