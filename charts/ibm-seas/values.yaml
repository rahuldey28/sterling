# Default values for IBMÂ® Sterling External Authentication Server for Linux Helm Chart a.k.a IBM Certified Container Software (IBMCCS).
# This is a YAML-formatted file.
# Declare variables to be passed into your templates. To override the default values either change in this file or use
# --set option provided by helm cli.

# Change license to true to indicate that you have read and agree to license agreements
# Refer: http://www-03.ibm.com/software/sla/sladb.nsf (L/N:  L-KNAN-CHKAUA)
license: false

# Specify the license edition as per license agreement. Valid value is prod or non-prod for Production and 
# Non-production respectively. Remember that this parameter is crucial for IBM Licensing and Metering Service
licenseType: prod

# Specify the respective Docker Image details for IBMCCS
image:
  # Specify the repository name along with image name
  repository: "cp.icr.io/cp/ibm-seas/seas-docker-image"
  # Specify the tag name for the image  
  tag: "6.1.0.0.02"
  # Specify the image pull secret for the service, if the image is in private registry 
  imageSecrets: ""
  # Enable true/false to use image digest
  digest:
    enabled: true
    value: sha256:c79606ed55dcdc0cf200d6dac0175a3cf0feba3276387530bfe697b84d5455cf
  # Specify respective pull policy to used to override default `IfNotPresent` policy  
  pullPolicy: IfNotPresent

nameOverride: ""
# Currently, the only supported architecture for IBMCCS is `amd64`
arch: "amd64"


# Specify these fields to provide config values for SEAS application  
seasArgs:
  # Specify this to set JVM heap size - don't set more than container limit resource memory. 
  maxHeapSize: "1024m"

# Manage Storage permission 
storageSecurity:
  fsGroup: 65534
  # Replace supplementalGroup Id with NFS User's groupId if the root squash is enabled on NFS server otherwise container will be failed
  supplementalGroups: [65534]
  
# persistence section specifies persistence volume claim settings which apply to the whole chart
persistentVolume:
  # enabled is whether to use Persistent Volumes or not
  enabled: true
  # useDynamicProvisioning is whether or not to use Storage Classes to dynamically create Persistent Volumes 
  useDynamicProvisioning: false
  # Specify the existing PV claim name to be used for deployment
  existingClaimName: ""
  # Specify this to use selector label name for PV-PVC bind
  labelName: "app.kubernetes.io/name"
  # Specify this to use selector label value for PV-PVC bind
  labelValue: "ibm-seas-pv"
  # Specify this to set storage class name
  storageClassName: "manual"
  # Specify this to set PVC size
  size: 2Gi
  # Specify this to set access mode
  accessMode: "ReadWriteOnce"

  
# Specify these fields for Services
service:
  # Specify this to set service type.
  type: "LoadBalancer"
  # Specify this to set load balancer IP. It's added for cloud environment.
  loadBalancerIP: "" 
  # Specify this to set external IP to access application outside the cluster.
  externalIP: ""
  # Specify this to set annotations 
  annotations: {}
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: public
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-name: seas
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: main01
    
  # Specify this to set external traffic policy 
  externalTrafficPolicy: ""
  # Specify this to set session Affinity
  sessionAffinity: "ClientIP"
  nonSecure:
    # Non Secure application is accessed by using below mentioned service port, so add port as per the requirement else it would be set 61365 as default port.
    servicePort: 61365
    # If traditional Non Secure port is different from 61365 while migrating from traditional to container environment then in this case 
    # we need to change container port as traditional Non Secure port value else It is not required to change the container port value.
    containerPort: 61365
  secure:
    # Secure application is accessed by using below mentioned service port, so add port as per the requirement else it would be set 61366 as default port.
    servicePort: 61366
    # If traditional secure port is different from 61366 while migrating from traditional to container environment then in this case 
    # we need to change container port as traditional secure port value else It is not required to change the container port value.
    containerPort: 61366
  jetty:
    # Jetty(EA_GUI.jnlp) application is accessed by using below mentioned service port, so add port as per the requirement 
    # else it would be set 9080 as default port.
    servicePort: 9080
    # If traditional jetty port is different from 9080 while migrating from traditional to container environment then in this case 
    # we need to change container port as traditional jetty port value else It is not required to change the container port value.
    containerPort: 9080

# Specify the Secret configuration for SEAS
secret:
  secretName: ""

# Specify the service account details
serviceAccount:
  # Set this field to `true` to create service account or `false` to use existing service account 
  create: true
  # Specify the name of service account to be used
  name: "" 

# Configure resource requests and limits
# ref: http://kubernetes.io/docs/user-guide/compute-resources/
# Container CPU -  limit and request both are set 1 CPU(1000m) as a default value but we can modify as per the requirement.
# Container Memory - limit and request both are set 1 GB as a default value but we can modify as per the requirement.
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
    ephemeral-storage: "5Gi"
  requests:
    cpu: 1000m
    memory: 1Gi
    ephemeral-storage: "3Gi"

    
affinity:
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
  # The matchExpression for key 'kubernetes.io/arch' is automatically added based on
  # architecture preference specified in 'arch'
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
  #    nodeSelectorTerms:
  #    - matchExpressions:
  #      - key: kubernetes.io/e2e-az-name
  #        operator: In
  #        values:
  #        - e2e-az1
  #        - e2e-az2
# The matchExpression for key 'kubernetes.io/arch' is automatically added based on
# architecture preference specified in 'arch'
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

    
# liveness and readiness Probe
livenessProbe:
  initialDelaySeconds: 175
  timeoutSeconds: 30
  periodSeconds: 60
  failureThreshold: 10

readinessProbe:
  initialDelaySeconds: 170
  timeoutSeconds: 5
  periodSeconds: 60
  failureThreshold: 10

# Set this to true create route in OpenShift cluster
route:
  enabled: false
  
# Set this to true to create Monitoring Dashboard for IBMCCS
dashboard:
  enabled: false
  
# The following files can be customized using key value pair in the list format.
# bin/log.properties, bin/security.properties, bin/ldapImportTool.properties 
# Add/Update: Key and Value both must be provided in the below format.
# <File Name Without Extension>_<Property Name>=<Property Value>
customProperties: []
# below is the example: 
#customProperties:
#  - security_FIPS_MODE=false
#  - log_audit.log.maxfilesize=10MB


# Add/Update VM arguments in the list format
# <Key as Java property name>=<value>
vmArguments: []
# below is the example:
#vmArguments:
#  - Djavax.net.debug=ssl,handshake,data,trustmanager
#  - Xdump:java+heap:events=user

# The custom directories/files can be mapped using the list format.
# For mapping, We need to provide full path of the file or directory. 
# First we need to create the directory with 'SEAS_RESOURCES' name if it is not available into PV. 
# and keep the custom directories/files into created directory. 
customFiles: []
# In the below example we need to keep log4j2.xml, guilog4j2.xml and krb5.conf files inside 'SEAS_RESOURCES' directory.
# so that the container will copy these files into conf directory.   
#customFiles:
#  - /conf/log4j2.xml	
#  - /conf/guilog4j2.xml	
#  - /conf/krb5.conf

# Set network policy
# https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # apply policy type
  policyTypes:
  - Ingress
  - Egress
  
  # apply ingress rule.
  ingress:
  - from:
    ports:
    - protocol: TCP
      port: 61366
    - protocol: TCP
      port: 61365
    - protocol: TCP
      port: 9080
      
  # apply egress rule. 
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 389
      
      